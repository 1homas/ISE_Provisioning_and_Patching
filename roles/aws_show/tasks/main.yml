---
# tasks file for aws_show
#------------------------------------------------------------------------------
# Show AWS Info
#
# Export your AWS Access & Secret keys into your terminal environment for
# authentication of the calls below:
#
# export AWS_REGION='us-west-1'
# export AWS_ACCESS_KEY='AKIAIOSF/EXAMPLE+KEY'
# export AWS_SECRET_KEY='wJalrXUtnFEMI/K7MDENG/bPxRfi/EXAMPLE+KEY'
#
# Invoke with tag names to only get what you need:
#
# ansible-playbook aws.show.yaml --tags vpc,sg
#------------------------------------------------------------------------------

  #----------------------------------------------------------------------------
  # Show Regions
  #----------------------------------------------------------------------------
  - name: Get All AWS Regions
    community.aws.aws_region_info:
    register: aws_regions
    tags: [ region, regions ]

  - name: Region Names
    ansible.builtin.debug:
      var: region_names
    tags: [ region, regions ]

  - name: AWS Region Names Table
    delegate_to: localhost
    vars:
      rows: "{{ aws_regions.regions }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ region, regions ]

  # - name: List of Region Names
  #   when: aws_regions is defined and aws_regions != []
  #   loop: "{{ aws_regions.regions }}"
  #   ansible.builtin.set_fact:
  #     region_names: "{{ region_names | default([]) + [ item.region_name  ] }}"
  #   tags: [ region, regions ]

  # - name: Region Names
  #   ansible.builtin.debug: var=region_names
  #   tags: [ region, regions ]


  #----------------------------------------------------------------------------
  # Show Availability Zones : aws_azs[region][...]
  #----------------------------------------------------------------------------
  - name: Get All AWS Availability Zones | {{ aws_region }}
    amazon.aws.aws_az_info:
    register: aws_azs
    tags: [ az, availability_zone ]

  - name: Availability Zone Names | {{ aws_region }}
    ansible.builtin.debug:
      var: aws_azs
    tags: [ az, availability_zone ]

  - name: Availability Zones Table | {{ aws_region }}
    delegate_to: localhost
    vars:
      hide: ['opt_in_status','messages',]
      rows: "{{ aws_azs.availability_zones }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ az, availability_zone ]

  # - name: List of Availability Zone Names | {{ aws_region }}
  #   when: aws_azs is defined and aws_azs != []
  #   loop: "{{ aws_azs.availability_zones }}"
  #   ansible.builtin.set_fact:
  #     az_names: "{{ az_names | default([]) + [ item.zone_name  ] }}"
  #   tags: [ az, availability_zone ]

  # - name: Availability Zone Names | {{ aws_region }}
  #   ansible.builtin.debug: var=az_names
  #   tags: [ az, availability_zone ]


  #----------------------------------------------------------------------------
  # Show VPCs
  #----------------------------------------------------------------------------
  - name: Get VPC(s)
    amazon.aws.ec2_vpc_net_info:
      # name: "{{ aws_vpc_name }}"
      # cidr_block:  "{{ aws_vpc_cidr }}"
      # region: "{{ vpc_region }}"
    register: vpcs
    tags: [ vpc, vpcs ]

  - name: Show VPCs
    ansible.builtin.debug: var=vpcs
    tags: [ vpc, vpcs ]

  - name: VPCs Table
    delegate_to: localhost
    when:
      - vpcs is defined
      - vpcs.vpcs is defined
      - vpcs.vpcs | count > 0
    vars:
      hide: ['dhcp_options_id','instance_tenancy','cidr_block_association_set','enable_dns_hostnames','enable_dns_support','classic_link_dns_supported','classic_link_enabled','tags']
      rows: "{{ vpcs.vpcs }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ vpc, vpcs ]


  #----------------------------------------------------------------------------
  # EC2 Instances
  #----------------------------------------------------------------------------
  - name: Get AWS EC2 Instances | {{ aws_region }}
    amazon.aws.ec2_instance_info:
      filters:
        "tag:project": "{{ project_name }}"
      #   instance-state-name: running
      # region: "{{ aws_region }}"
    register: ec2
    tags: [ ec2, instances ]

  # - name: Show EC2 Instances
  #   ansible.builtin.debug: var=ec2
  #   tags: [ ec2, instances ]

  # - name: List of AWS EC2 Instances
  #   when: ec2 is defined and ec2.instances != []
  #   loop: "{{ ec2.instances }}"
  #   vars:
  #     attrs: ['image_id', 'instance_id', 'instance_type', 'key_name', 'private_ip_address', 'public_ip_address' ]
  #   ansible.builtin.set_fact:
  #     instance_names: "{{ instance_names | default([]) + [ item.tags.Name  ] }}"
  #   tags: [ ec2, instances ]

  # - name: Show AWS EC2 Instances by Name
  #   ansible.builtin.debug: var=instance_names
  #   tags: [ ec2, instances ]

  - name: EC2 Instances Table | {{ aws_region }}
    delegate_to: localhost
    when:
      - ec2 is defined
      - ec2.instances is defined
      - ec2.instances | count > 0
    vars:
      # hide: ['security_groups','tags']
      head: ['image_id','instance_id','instance_type','key_name','private_ip_address','state']
      rows: "{{ ec2.instances | flatten }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ ec2, instances ]


  #----------------------------------------------------------------------------
  # Show Security Groups
  #----------------------------------------------------------------------------

  # - name: Show Security Groups
  #   amazon.aws.ec2_group_info:
  #     # filters:
  #       # vpc_id: "{{ vpcs.vpcs.id }}"
  #       # region: "{{ vpc_region }}"
  #   register: security_groups
  #   tags: [ sg, security_group ]

  - name: Get All Security Groups
    amazon.aws.ec2_group_info:
      # filters:
        # vpc_id: "{{ vpcs.vpcs.id }}"
        # region: "{{ vpc_region }}"
    register: ec2_sgs
    tags: [ sg, security_group ]

  - name: Show ec2_sgs
    ansible.builtin.debug:
      var: ec2_sgs
    tags: [ sg, security_group ]


  # - name: List of Security Group Names
  #   when: ec2_sgs is defined and ec2_sgs != []
  #   loop: "{{ ec2_sgs.security_groups }}"
  #   ansible.builtin.set_fact:
  #     sg_names: "{{ sg_names | default([]) + [ item.group_id + ' | ' + item.group_name ] }}"
  #   tags: [ sg, security_group ]

  # - name: sg_names
  #   ansible.builtin.debug: var=sg_names
  #   tags: [ sg, security_group ]


  # - name: Get details for Security Groups
  #   amazon.aws.ec2_group_info:
  #     filters:
  #       group-name: "{{ sg_names }}"
  #   register: sg_details
  #   tags: [ sg, security_group ]

  # - name: sg_details
  #   ansible.builtin.debug: var=sg_details
  #   tags: [ sg, security_group ]

  - name: Security Groups Table
    delegate_to: localhost
    when:
      - ec2_sgs is defined
      - ec2_sgs.security_groups is defined
      - ec2_sgs.security_groups | count > 0
    vars:
      head: ['group_name','group_id','description']
      rows: "{{ ec2_sgs.security_groups | flatten }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ sg, security_group ]


  #----------------------------------------------------------------------------
  # Show CloudFormation stack(s)
  #----------------------------------------------------------------------------
  - name: Get All CloudFormation info
    amazon.aws.cloudformation_info:
    register: stacks
    tags: [ cf, cft, cloudformation, stacks ]

  # - name: stacks.cloudformation
  #   ansible.builtin.debug:
  #     var: stacks # .cloudformation
  #   tags: [ cf, cft, cloudformation, stacks ]

  - name: List of CloudFormation Stacks
    when: stacks is defined and stacks != []
    loop: "{{ lookup('dict', stacks.cloudformation) }}"
    ansible.builtin.set_fact:
      stack_names: "{{ stack_names | default([]) + [ item.key ] }}"
    tags: [ cf, cft, cloudformation, stacks ]

  - name: stack_names
    ansible.builtin.debug:
      var: stack_names
    tags: [ cf, cft, cloudformation, stacks ]


  #----------------------------------------------------------------------------
  # Show ec2 ENI interfaces in AWS
  #----------------------------------------------------------------------------

  - name: Get All ec2_eni_info
    amazon.aws.ec2_eni_info:
      # filters:
      #   network-interface-id: eni-xxxxxxx
    register: ec2_eni_info
    tags: [ eni, enis ]

  - name: Show ec2_eni_info
    ansible.builtin.debug:
      var: ec2_eni_info
    tags: [ eni, enis ]

  - name: List of ENI
    when:
      - ec2_eni_info is defined
      - ec2_eni_info.network_interfaces is defined
      - ec2_eni_info.network_interfaces | count > 0
    loop: "{{ ec2_eni_info.network_interfaces }}"
    ansible.builtin.set_fact:
      enis: "{{ eni_names | default([]) + [
        {
        'id': item.id,
        'group_id': item.groups[0].group_id,
        'group_name': item.groups[0].group_name,
        'public_ip': item.association.public_ip,
        'private_ip': item.private_ip_address,
        }
        ] }}"
    tags: [ eni, enis ]

  - name: enis
    ansible.builtin.debug: var=enis
    tags: [ eni, enis ]

  - name: ENIs Table
    delegate_to: localhost
    when:
      - enis is defined
      - enis | count > 0
    vars:
      # head: ['mac_address','status','private_ip_address']
      rows: "{{ enis }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ eni, enis ]


  #----------------------------------------------------------------------------
  # Show ec2 volumes in AWS
  #----------------------------------------------------------------------------
  - name: Get All Volumes
    amazon.aws.ec2_vol_info:
      region: "{{ vpc_region }}"
    register: ec2_volumes
    tags: [ volume, volumes ]

  - name: ec2_volumes
    ansible.builtin.debug: var=ec2_volumes
    tags: [ volume, volumes ]

  - name: Volumes Table
    delegate_to: localhost
    when:
      - ec2_volumes is defined
      - ec2_volumes.volumes is defined
      - ec2_volumes.volumes | count > 0
    vars:
      # hide: ['security_groups','tags']
      head: ['id','status','size','type','encrypted','iops']
      rows: "{{ ec2_volumes.volumes }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ cf, cft, cloudformation, stacks ]


  #----------------------------------------------------------------------------
  # Show DHCP options in AWS
  #----------------------------------------------------------------------------
  - name: Get All ec2_vpc_dhcp_option_info
    amazon.aws.ec2_vpc_dhcp_option_info:
      region: "{{ vpc_region }}"
    register: ec2_vpc_dhcp_options
    tags: [ vpc, dhcp ]

  - name: ec2_vpc_dhcp_options
    ansible.builtin.debug:
      var: ec2_vpc_dhcp_options
    tags: [ vpc, dhcp ]


  #----------------------------------------------------------------------------
  # ec2_vpc_net_info – Gather information about ec2 VPCs in AWS
  #----------------------------------------------------------------------------
  - name: Get All ec2_vpc_net_info
    amazon.aws.ec2_vpc_net_info:
      region: "{{ vpc_region }}"
    register: ec2_vpc_nets
    tags: [ vpc, net, network ]

  - name: ec2_vpc_nets
    ansible.builtin.debug:
      var: ec2_vpc_nets
    tags: [ vpc, net, network ]


  #----------------------------------------------------------------------------
  # Show ec2 VPC subnets in AWS
  #----------------------------------------------------------------------------
  - name: Get All ec2_vpc_subnet_info
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ vpc_region }}"
    register: ec2_vpc_subnets
    tags: [ subnet, vpc ]

  - name: ec2_vpc_subnets
    ansible.builtin.debug:
      var: ec2_vpc_subnets
    tags: [ subnet, vpc ]


  #----------------------------------------------------------------------------
  # Show Route53/DNS Hosted Zones
  #----------------------------------------------------------------------------
  - name: List all hosted zones
    community.aws.route53_info:
      query: hosted_zone
    register: hosted_zones
    tags: [ dns,hosted_zones,route53,zones ]

  - ansible.builtin.debug:
      var: hosted_zones
    tags: [ dns,hosted_zones,route53,zones ]

  - name: Return a count of all hosted zones
    community.aws.route53_info:
      query: hosted_zone
      hosted_zone_method: count
    register: hosted_zone_count
    tags: [ dns,hosted_zones,route53,zones ]

  - ansible.builtin.debug: var=hosted_zone_count
    tags: [ dns,hosted_zones,route53,zones ]

  - name: List hosted zone record sets
    loop: "{{ hosted_zones.HostedZones }}"
    community.aws.route53_info:
      query: record_sets
      hosted_zone_id: "{{ item.Id }}"
      # profile: account_name
      # max_items: 20
    register: record_sets
    tags: [ dns,hosted_zones,route53,zones ]

  - ansible.builtin.debug:
      var: record_sets
    tags: [ dns,hosted_zones,route53,zones ]

  - name: Show Hosted Zone Record Sets
    loop: "{{ record_sets.results }}"
    ansible.builtin.debug:
      var: item
    tags: [ dns,hosted_zones,route53,zones ]


  - name: ResourceRecordSets
    ansible.builtin.debug:
      # msg: "{{ record_sets.results | json_query('[].ResourceRecordSets[].Name') }}"
      msg: "{{ record_sets.results | json_query('[].ResourceRecordSets') | flatten }}"
    tags: [ dns,hosted_zones,route53,zones ]


  - name: Summary of DNS ResourceRecordSets
    delegate_to: localhost
    vars:
      maxw: 40
      head: ['Type','TTL','Name',]  # 'ResourceRecords']
      rows: "{{ record_sets.results | json_query('[].ResourceRecordSets') | flatten }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ dns,hosted_zones,route53,zones ]




  #----------------------------------------------------------------------------
  # Show S3 Buckets
  #----------------------------------------------------------------------------
  - name: Get All S3 Buckets
    community.aws.aws_s3_bucket_info:
    register: s3_buckets
    tags: [ s3, bucket ]

  - name: S3 Buckets
    delegate_to: localhost
    vars:
      rows: "{{ s3_buckets.buckets }}"
      temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
    ansible.builtin.shell: "echo '{{ temp }}' > /dev/tty"
    tags: [ s3, bucket, buckets ]

  # - ansible.builtin.debug: var=s3_buckets
  #   tags: [ s3, bucket ]

  # - name: List buckets
  #   ansible.builtin.debug:
  #     msg: "{{ s3_buckets['buckets'] }}"
  #   tags: [ s3, bucket ]



...
