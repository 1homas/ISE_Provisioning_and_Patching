---
# tasks file for roles/ise_cli_wait_for_app_server

# The ISE Application Server STATE may be { not running | initializing | running }
#
# Example output:
# ```
# ISE PROCESS NAME                       STATE            PROCESS ID
# --------------------------------------------------------------------
# Database Listener                      running          7540
# Database Server                        running          129 PROCESSES
# Application Server                     running          55108
# ...
# ```

# - ansible.builtin.debug: var=inventory_hostname
# - ansible.builtin.debug: var=ansible_host
# - ansible.builtin.debug: var=ansible_ssh_user
# - ansible.builtin.debug: var=ansible_ssh_private_key_file


- name: Wait for Application Server '{{ wait_state }}'
  vars:
    ansible_connection: ansible.netcommon.network_cli
    ansible_network_os: cisco.ios.ios
    ansible_command_timeout: 60 # ðŸ’¡ command requires ~45 seconds
  ansible.netcommon.cli_command:
    command: show application status ise
  until:
    - output is defined
    - output.stdout is defined
    - output.stdout is regex('Application Server[ ]+{{ wait_state }}')
  retries: "{{ wait_retries }}" # 45
  delay: "{{ wait_delay }}" # 10
  timeout: "{{ wait_timeout }}" # 3000 # seconds. 50 minutes
  register: output

- ansible.builtin.debug: var=output

# ðŸ’¡ For ISE <= 3.1, you may run many commands but once you issue the exit
#    you will get an error if you try to run another one.
- name: Exit | {{ inventory_hostname }} ({{ ansible_host }})
  ansible.netcommon.cli_command:
    command: "exit"
